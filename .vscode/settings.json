{
  "files.exclude": {
    // Versteckt bestimmte Dateien im VSCode internen Explorer. Meist auto-generierte Dateien vom Kompilieren von einem der `./IT/` Ordner.
    "**/.git": true,
    "**/.svn": true,
    "**/.hg": true,
    "**/CVS": true,
    "**/*.bak": true,
    "**/.DS_Store": true,
    "**/*.bl[0-9]": true,
    "**/*.jhd": true,
    "**/*.naf": true,
    "**/*.err": true,
    "**/*.rs[0-9]": true,
    "**/*.dum": true,
    "**/*.env": true,
    "**/*.svl": true,
    "**/*_1_2*": true,
    "**/*.LST": true,
    "**/*.OBJ": true,
    "**/*.mac": true,
    "**/*.dep": true,
    "**/*.XML": true,
    "**/*.AOF": true,
    "**/*.BIN": true,
    "**/*.ctx": true,
    "**/*.dbi": true,
    "**/*.HEX": true,
    "**/*.M51": true,
    "**/*.rapp": true,
    "**/*.rprj": true,
    "**/*.xdb": true,
    "**/*.XRF": true,
    "**/*.d": true,
    "**/*.o": true,
    "**/*.ko": true,
    "**/*.obj": true,
    "**/*.elf": true,
    "**/*.ilk": true,
    "**/*.map": true,
    "**/*.exp": true,
    "**/*.gch": true,
    "**/*.pch": true,
    "**/*.lib": true,
    "**/*.a": true,
    "**/*.la": true,
    "**/*.lo": true,
    "**/*.dll": true,
    "**/*.so": true,
    "**/*.so.*": true,
    "**/*.dylib": true,
    "**/*.exe": true,
    "**/*.out": true,
    "**/*.app": true,
    "**/*.i*86": true,
    "**/*.x86_64": true,
    "**/*.hex": true,
    "**/*.dSYM/": true,
    "**/*.su": true,
    "**/*.idb": true,
    "**/*.pdb": true,
    "**/*.mod*": true,
    "**/*.cmd": true,
    "**/*.lst": true
  },
  "editor.formatOnSave": true, // Simpel. Sollte keine Erklärung benötigen.
  "files.trimTrailingWhitespace": true, // Unnützer Whitespace (Leerzeichen, Tabs, Newlines etc.) am Ende der Zeile oder am Ende der Datei sind unerwünscht und haben keinen Nutzen. Daher wird dieser entfernt.
  "files.trimFinalNewlines": true,
  "files.insertFinalNewline": true, // Ausnahme ist eine einzige leere Zeile am Ende der Datei, welches ein Teil des C Standards ist, welcher gegen bestimmte Situationen vorbeugt. Da die Implementation des Standards aber für den Nutzer nahezu unbemerkbar ist, wird dies hier implementiert.
  "markdownlint.config": {
    // Regeln, bei denen markdownlint meckern würde, die aber an sich vollkommen in ordnung sind.
    "line-length": false, // 80 Zeichen pro Zeile ist eine Regel, die hier keinen Bedarf hat. Falls eine Zeile zu lang ist, wird VSCode diese umgebrochen darstellen, dessen Option mit `Alt+Z` umschaltbar ist. Am besten merken, da man die Option bei horizontal langen Tabellen ggf. temporär ausschalten möchte.
    "no-inline-html": false, // Markdown ist an sich nur vereinfachtes HTML und Vereinfachungen kommen immer mit Begrenzungen. Wenn etwas mit Markdown alleine nicht machbar ist, warum dann nicht auf das Basis Level umsteigen?
    "ul-indent": false,
    "no-duplicate-header": false,
    "no-trailing-punctuation": false, // Darf eine Überschrift nicht mit einem Satzzeichen enden? Siehe `./Ethik/2020-02-05`
    "single-title": false, // Man sollte gleiche Überschriften mehrmals verwenden dürfen
    "no-blanks-blockquote": false
  },
  "C_Cpp.errorSquiggles": "Disabled", // Die IT Workspaces sind eigentlich dafür ausgelegt, damit man direkt mit VSCode die Ordner öffnen kann und die Einstellungen von der dazugehörigen `/.vscode/settings.json` übernommen werden. Will man aber nur einen kurzen Blick in eine C Datei schauen, bekommt man vom Intellisense direkt Fehler, weil unser Stil etwas anders ist als normaler C Code. Daher verstecke ich diese Meldungen.
  "cSpell.language": "en,de",
  "cSpell.ignoreRegExpList": [
    "\\$.*?\\$", // Inlinestyle Latex in Markdown
    "\\$\\$[\\s\\S]+?\\$\\$", // Displaystyle Latex in Markdown
    "```[\\s\\S]+?```", // Codefences in Markdown
    "\\(#.*?\\)" // Markdown TOC mit Mathematik
  ],
  "cSpell.allowCompoundWords": true,
  "cSpell.words": [
    "CRISPR",
    "Deutungshypothese",
    "Dipolare",
    "Elektroskop",
    "Elektroskops",
    "Ertüchtiger",
    "Fahnenapelle",
    "GMOs",
    "Horni",
    "Leifi",
    "Mekruphy",
    "Melita",
    "NSDAP",
    "Phet",
    "Proportionalitätskonstante",
    "TALENs",
    "Transgenics",
    "Unternehmensfinazierung",
    "ZFNs",
    "Zerdenken",
    "ungleichnamige",
    "ungleichnamigen",
    "Äquipotentiallinien"
  ],
  "markdown.extension.list.indentationSize": "inherit",
  "editor.insertSpaces": true,
  "editor.tabSize": 4
}
